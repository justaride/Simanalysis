[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "simanalysis"
version = "2.0.0"
description = "Derrick - The PhD in Simology. Surgical analysis of Sims 4 mods and CC."
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "justaride"},
]
maintainers = [
    {name = "justaride"},
]
keywords = [
    "sims4",
    "modding",
    "conflict-detection",
    "analysis",
    "dbpf",
    "game-modding"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Simulation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.1.0",
    "rich>=13.0.0",
    "textual>=0.47.0",
    "lxml>=4.9.0",
    "pyyaml>=6.0",
    "tqdm>=4.65.0",
    "networkx>=3.0",
    "jinja2>=3.1.0",
]

[project.optional-dependencies]
ai = [
    "anthropic>=0.18.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-PyYAML>=6.0",
    "types-tqdm>=4.65",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]
all = [
    "simanalysis[ai,dev,docs]",
]

[project.urls]
Homepage = "https://github.com/justaride/Simanalysis"
Documentation = "https://github.com/justaride/Simanalysis/docs"
Repository = "https://github.com/justaride/Simanalysis"
Issues = "https://github.com/justaride/Simanalysis/issues"
Changelog = "https://github.com/justaride/Simanalysis/CHANGELOG.md"

[project.scripts]
simanalysis = "simanalysis.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["simanalysis*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
simanalysis = [
    "reports/templates/*.html",
    "reports/templates/*.md",
    "py.typed"
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "SIM",    # flake8-simplify
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["S101", "PLR2004"]  # Allow assert and magic values in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "networkx.*",
    "tqdm.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=simanalysis",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "requires_mods: marks tests that require real mod files",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
